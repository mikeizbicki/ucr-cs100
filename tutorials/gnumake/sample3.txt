objects = main.o file.o

# multiline
CFLAGS = -ansi -pedantic \
		 -Wall -Werror

program: $(objects)
	cc -o program $(objects)

main.o: file.h
file.o:

clean:
	rm -f program $(objects)

Variables are used for readability and to avoid repetition. The syntax for setting a variable is: [name] = [expression]. In this sample, "objects" is set to "main.o file.o".

The syntax for getting a variable is: $([name]). In this example, "main.o file.o" is pasted wherever "$(objects)" appears.

In this sample, the .c file prerequisites and recipe lines for the object files have been omitted; make has implicit rules for generating .o files, so it is unnecessary to spell it out.

CFLAGS is a variable that is automatically used when implicitly compiling c code. CXXFLAGS is used for C++ and CPPFLAGS is used for both C and C++.

The recipe for "clean" breaks the convention that a rule builds its target. Instead, it removes all the files generated by make. It is a target often found in makefiles.

The -f option for rm ignores nonexistent files instead of printing an error, and doesn't prompt.

Single logical lines can be broken into multiple physical lines with the backslash character. In this sample, 

-ansi -pedantic \
-Wall -Werror

is equivalent to "-ansi -pedantic -Wall -Werror".
