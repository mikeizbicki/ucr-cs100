## cs100 - open source software construction

	This is a course on [how to be a hacker](http://www.catb.org/esr/faqs/hacker-howto.html).
Being a hacker [means a lot of things](http://www.catb.org/jargon/html/H/hacker.html).
	It means:

1. wanting to know *how* and *why* computers work

2. being efficient / never repeating yourself

3. using and contributing to open source software

4. understanding the edge cases of your software

5. using tools in creative and unexpected ways

6. (occasionally) we combine all these together and break stuff

Hacking is a mindset.
I can't force it on you---it's up to you to embrace it.
For example, we'll be discussing many new tools in this course:
a version control system called `git`,
an editor called `vim`,
debugging tools called `gdb`, `valgrind`, and `cppcheck`,
and we'll be going into quite a bit more depth on how to use the `bash` shell and the `Linux` operating system.
All of these tools are very weird.
Using them will make you uncomfortable.
At first.
But these tools are powerful.
Mastering these tools will make you a *much* more efficient programmer.
Once you've mastered them, you'll never go back.

There are two main projects you will work on in this course:

1. Your first four homework assignments walk you through the process of building your own unix shell.
This is the biggest project you've undertaken so far.
You'll be developing it as an open source project,
and you will collaborate with each other at various points.

2. Your last homework assignment is to contribute to the open source community by improving the documentation on a project of your choice.
Many of the required readings for this course were written by former cs100 students.
If you do a good job on this project, future cs 100 students will be learning from you for years to come!

By the end of the course, you should be comfortable running your own open source projects and contributing to other people's projects.


### grades

	We will not be using ilearn in this course.
Instead, we will be using a course management system called `gitlearn`.
This software was developed in part by previous cs100 students,
and you will be able to earn considerable extra credit by contributing to it.
We will be using this system as a case study in bash programming and the unix philosophy.
For details, see the [gitlearn repo](https://github.com/mikeizbicki/gitlearn).

### cheating policy

	Every assignment specifies different collaboration policies.
Some assignments will be individual, and some will be in a group.
Follow the specified policy exactly!

	I take cheating seriously.
When I catch students cheating, I give them an F in the class.
Then I forward your case to the academic integrity board and recommend that you be expelled from UCR.

	All of your code will be run through an automated cheating detector.
It is very good.
It understands C++ better than you do and can find instances of cheating much more sophisticated than just copy and pasting.

