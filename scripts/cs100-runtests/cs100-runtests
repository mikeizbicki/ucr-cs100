#/bin/bash

# Written by Michael Evans in February 2015 
# Released under MIT

# This script takes a shell, a test file, and (optionally)
# a delay as parameters and runs the test files in the
# given shell with the delay between commands.
#
# usage:
# cs100-runtests shell testFile[s] [delay]
#
#
# shell: can be programs like "bin/rshell" or "bash".
#    bash gets run in interactive mode, and every
#    other option is invoked verbatim.
# 
# testFile[s]: the file containing the tests. The name
#    undergoes filename expansion
#    (see https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html)
#
# delay: the number of microseconds to wait between
#    commands. gets passed directly to usleep. (see man usleep)
#
#
# Outputs:
#   * prints the name of the file currently being tested
#     surrounded in stars
#   * prints 80 '=' characters denoting start of tests
#   * runs the shell with the specified tests
#   * prints 80 '=' characters denoting end of test
#


#################################
# funcitons and variables setup #
#################################

# function to print its parameters in red
# does not insert a newline after printing
red() {
  echo -en "\033[1;31m"
  echo -n "$@"
  echo -en "\033[0m"
}

# prints usage to stderr then quits
usage() {
  cat >&2 <<EOF
Usage: $(basename $0) shell testFile[s] [delay]
EOF
  exit 1
}



# this function takes the input file passed into it ($1)
# and prints it to stdout one line at a time, pausing for
# $U_DELAY microseconds between lines. 
yieldLines() {
  # get the pid of the shell used to execute the tests
  CHILD_SHELL=$(ps --sort=start_time --ppid $CUR_PID | awk 'NR==3 { print $1 }')

  # read a line from fd 3 into line
  # (see http://en.wikipedia.org/wiki/File_descriptor)
  # (see man read)
  while read -u 3 line
  do

    # sleep for $U_DELAY microseconds
    # (see man usleep)
    usleep $U_DELAY


    # if the line consists of the ^Z character, send SIGTSTP to the
    # child shell
    if [[ ${line} == "" ]]
    then
      # send SIGTSTP to subprocess responsible for executing commands
      # (see man kill)
      # (see man 7 signal)
      kill -s SIGTSTP $CHILD_SHELL >/dev/null 2>&1
      # print "^Z" just for looks.
      echo "^Z" >/proc/$CUR_PID/fd/1
      # no actual input to the child shell. got to next line
      continue
    fi
    # if the line consists of the ^C character, send SIGTSTP to the
    # child shell
     if [[ ${line} == "" ]]
    then
      # send SIGINT to subprocess responsible for executing commands
      # (see man kill)
      # (see man 7 signal)
      kill -s SIGINT $CHILD_SHELL >/dev/null 2>&1
      # print "^C" just for looks.
      echo "^C" >/proc/$CUR_PID/fd/1
      # no actual input to the child shell. got to next line
      continue
    fi


    # if not using bash, print the current line to the screen
    # prints to fd 1 of the current process
    if [[ "$COMMAND_SHELL" != "bash" ]]
    then
      echo "${line}" >/proc/$CUR_PID/fd/1
    fi
    
    # this goes to stdout, which becomes stdin of whatever it is
    # piped to
    echo "${line}"


  # open $1 as fd 3
  done 3<$1
}



# first arguments is command shell
COMMAND_SHELL=${1}
# second argument is for testfiles
TEST_CASE_FILES=${2}
# third argument is delay
# defaults to 100000
# (see http://www.tldp.org/LDP/abs/html/parameter-substitution.html)
U_DELAY=${3:-100000}
# current process id
# (see http://tldp.org/LDP/abs/html/internalvariables.html)
CUR_PID=$$


##################################################
# check parameters and make sure they're allowed #
##################################################


# Check if 2 or 3 arguments were provided
# (see http://tldp.org/LDP/abs/html/internalvariables.html)
if [[ $# < 2 || $# > 3 ]]
then
  red "Error: "
  echo "improper number of parameters" >&2
  usage
fi



# test if $1 is a valid executable (rshell, bash, or executable)
# (see http://mywiki.wooledge.org/BashGuide/Practices#Bash_Tests)
command -v $COMMAND_SHELL &>/dev/null || {
  red "$COMMAND_SHELL"
  echo ": not found" >&2
  usage
}


# Use regular expressions to make sure the delay is only made up of numbers
# (see http://stackoverflow.com/questions/304864/how-do-i-use-regular-expressions-in-bash-scripts)
# (see http://en.wikipedia.org/wiki/Regular_expression)
# the regular expression tests if there is one or more numbers between the start and end of the
# string. if there is anything except numbers, it will not match.
if [[ ! "$U_DELAY" =~ ^[0-9]+$ ]]
then
  red "$U_DELAY"
  echo ": not a valid number of microseconds" >&2
  usage
fi


# $TEST_CASE_FILES* should expand to a list of files or directories
# (see https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html)
# (see http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html)
for file in $TEST_CASE_FILES*
do
  # if the current file is a directory, recurse on it
  if [[ -d $file ]]
  then
    $0 $COMMAND_SHELL $file/ $U_DELAY
    # skip this iteration. No need to print for the directory
    continue
  elif [[ "$file" =~ ^.*/\*$ ]]
  then
    # $file is printed without the last two characters
    # (see man bc)
    # (see http://tldp.org/LDP/abs/html/string-manipulation.html)
    red "${file:0:$(bc <<< \"${#file}-2\")}"
    echo ": this folder has has no test files"
    continue
  elif [[ ! -f $file ]]
  then
    red "$file"
    echo ": does not expand to a valid file or directory name" >&2
    usage
  fi

  stars="********************************************************************************"
  # calculate the number of stars needed to align properly using bc
  # (see http://tldp.org/LDP/abs/html/string-manipulation.html)
  # (see man bc)
  numStars=`bc <<< "${#file} + 4"`

  # print $numStars stars
  # (see http://tldp.org/LDP/abs/html/string-manipulation.html)
  echo "${stars:0:$numStars}"
  echo "* $file *"
  echo "${stars:0:$numStars}"

  # denote start of test execution
  echo ================================================================================

  # pipe output of yieldlines into a shell
  # (see http://www.tldp.org/LDP/abs/html/io-redirection.html)
  if [[ "$COMMAND_SHELL" == "bash" ]]
  then
    yieldLines $file | bash -i  # run bash in interactive mode
  else
    yieldLines $file | $COMMAND_SHELL
  fi
  # denote end of test execution
  echo # extra newline
  echo ================================================================================
done



